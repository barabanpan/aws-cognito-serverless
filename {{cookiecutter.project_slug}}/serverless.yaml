# For full config options, check the docs:
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/

service: {{cookiecutter.project_slug}}

frameworkVersion: '2'

package:
  individually: true  # for each lambda to be packaged individually

plugins:
  - serverless-s3-sync
  - serverless-python-requirements
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: {{cookiecutter.aws_region}}
  apiGateway:
    shouldStartNameWithService: true
  environment:
    REGION: ${self:provider.region}
    USERS_TABLE_NAME: ${self:custom.usersTableName}
    CUSTOM_ENTITY_TABLE_NAME: ${self:custom.customEntityTableName}
    WRITE_TO_BUCKET_NAME: ${self:custom.bucketForWriting}
    COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
    COGNITO_USER_POOL_ID: !Ref CognitoUserPool
    URL_TO_LAMBDA_FOR_REDIRECT: 
      Fn::Join:
        - ""
        - - https://
          - Ref: ApiGatewayRestApi
          - .execute-api.{{cookiecutter.aws_region}}.amazonaws.com/
          - ${self:custom.currentStage}/custom-verification/redirect
    URL_FOR_REDIRECT_AFTER_COGNITO_VERIFICATION: http://${self:custom.openApiDocsBucketName}.s3-website.{{cookiecutter.aws_region}}.amazonaws.com
  
custom:
  currentStage: ${opt:stage, self:provider.stage, 'dev'}
  usersTableName: users-{{cookiecutter.project_slug}}-${self:custom.currentStage}  # for users' information
  userPoolName: user-pool-{{cookiecutter.project_slug}}-${self:custom.currentStage}
  userPoolClientName: user-pool-client-{{cookiecutter.project_slug}}-${self:custom.currentStage}
  cognitoUserPoolDomainName: {{ cookiecutter.project_slug }}-{{ cookiecutter.random_suffix }}-${self:custom.currentStage}
  customEntityName: {{cookiecutter.custom_entity_name}}  # for crud
  customEntityTableName: ${self:custom.customEntityName}-{{cookiecutter.project_slug}}-${self:custom.currentStage}
  bucketForWriting: {{cookiecutter.s3_bucket_name}}-{{cookiecutter.project_slug}}-${self:custom.currentStage}
  openApiDocsBucketName: {{cookiecutter.project_slug}}-{{cookiecutter.random_suffix}}-docs-${self:custom.currentStage}
  pythonRequirements:  # for layer with python requirements
    dockerizePip: non-linux
    useDownloadCache: true
    useStaticCache: true
    staticCacheMaxVersions: 5
    layer:
      description: Python requirements lambda layer
      compatibleRuntimes:
        - python3.7
        - python3.8
  s3Sync:
    # A simple configuration for copying static assets
    - bucketName: ${self:custom.openApiDocsBucketName} # required
      localDir: ./swagger_s3_bucket # required
      acl: public-read
      defaultContentType: text/html # optional
      params: # optional
        - "index.html":
            CacheControl: 'no-cache'
        - "*.js":
            CacheControl: 'public, max-age=31536000'

functions:
  sign_up:
    handler: code/auth/sign_up/sign_up.handler
    layers:
      - Ref: BasicLambdaLayer
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /auth/sign_up
          method: post
          cors: true
    package:
      exclude:
        - ./**
      include:
        - code/auth/sign_up/**
    iamRoleStatements:
      - Effect: Allow  # for writing users' info
        Action:
          - dynamodb:PutItem
        Resource:
          Fn::GetAtt: [UsersTable, Arn]
      - Effect: Allow
        Action:
          - cognito-idp:AdminAddUserToGroup
        Resource:
          Fn::GetAtt: [CognitoUserPool, Arn]

  sign_in:
    handler: code/auth/sign_in/sign_in.handler
    layers:
      - Ref: BasicLambdaLayer
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /auth/sign_in
          method: get
          cors: true
    package:
      exclude:
        - ./**
      include:
        - code/auth/sign_in/**

  refresh_token:
    handler: code/auth/refresh/refresh.handler
    layers:
      - Ref: BasicLambdaLayer
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /auth/refresh
          method: get
          cors: true
    package:
      exclude:
        - ./**
      include:
        - code/auth/refresh/**

  custom_message:
    handler: code/custom_verification/verification_message/custom_message.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: CustomMessage
          existing: true
    package:
      exclude:
        - ./**
      include:
        - code/custom_verification/verification_message/**

  verify_and_redirect:
    handler: code/custom_verification/verify_and_redirect/redirect.handler
    events:
      - http:
          path: /custom-verification/redirect
          method: get
          cors: true
    package:
      exclude:
        - ./**
      include:
        - code/custom_verification/verify_and_redirect/**

  write_to_bucket:
    handler: code/write_to_bucket/write_to_bucket.handler
    layers:
      - Ref: BasicLambdaLayer
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /write_to_bucket
          method: post
          cors: true
    package:
      exclude:
        - ./**
      include:
        - code/write_to_bucket/**
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:ListBucket  # for Read
          - s3:GetObject
          - s3:PutObject
        Resource:
          - Fn::Join: [ '/', [ Fn::GetAtt: [BucketForWriting, Arn], '*' ] ]  # for Write
          - Fn::GetAtt: [BucketForWriting, Arn] 

  health_check:
    handler: code/health_check/health_check.handler
    layers:
      - Ref: BasicLambdaLayer
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /health_check
          method: get
          cors: true
    package:
      exclude:
        - ./**
      include:
        - code/health_check/**

  secret_resource:
    handler: code/secret_resource/secret_resource.handler
    layers:
      - Ref: BasicLambdaLayer
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /secret_resource
          method: get
          cors: true
          authorizer:
            name: cognito_authorizer
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS  # use TOKEN for custom authorizer
            arn:
              Fn::GetAtt:
                - CognitoUserPool
                - Arn
            scopes:  # can be table1.write or table2.read
              - aws.cognito.signin.user.admin
              # Cognito checks if access token includes these scopes
    package:
      exclude:
        - ./**
      include:
        - code/secret_resource/**
  
  {{cookiecutter.custom_entity_name}}_get:
    handler: code/{{cookiecutter.custom_entity_name}}/get/get.handler
    layers:
      - Ref: BasicLambdaLayer
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /{{cookiecutter.custom_entity_name}}
          method: get
          cors: true
      - http:
          path: /{{cookiecutter.custom_entity_name}}/{uid}
          method: get
          cors: true
    package:
      exclude:
        - ./**
      include:
        - code/{{cookiecutter.custom_entity_name}}/get/**
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem 
        Resource:
          Fn::GetAtt: [CustomEntityTable, Arn]
          
  {{cookiecutter.custom_entity_name}}_post:
    handler: code/{{cookiecutter.custom_entity_name}}/post/post.handler
    layers:
      - Ref: BasicLambdaLayer
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /{{cookiecutter.custom_entity_name}}
          method: post
          cors: true
    package:
      exclude:
        - ./**
      include:
        - code/{{cookiecutter.custom_entity_name}}/post/**
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem 
          - dynamodb:PutItem
        Resource:
          Fn::GetAtt: [CustomEntityTable, Arn]

  {{cookiecutter.custom_entity_name}}_update:
    handler: code/{{cookiecutter.custom_entity_name}}/update/update.handler
    layers:
      - Ref: BasicLambdaLayer
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /{{cookiecutter.custom_entity_name}}/{uid}
          method: put
          cors: true
    package:
      exclude:
        - ./**
      include:
        - code/{{cookiecutter.custom_entity_name}}/update/**
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem 
          - dynamodb:PutItem
        Resource:
          Fn::GetAtt: [CustomEntityTable, Arn]

  {{cookiecutter.custom_entity_name}}_delete:
    handler: code/{{cookiecutter.custom_entity_name}}/delete/delete.handler
    layers:
      - Ref: BasicLambdaLayer
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /{{cookiecutter.custom_entity_name}}/{uid}
          method: delete
          cors: true
    package:
      exclude:
        - ./**
      include:
        - code/{{cookiecutter.custom_entity_name}}/delete/**
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource:
          Fn::GetAtt: [CustomEntityTable, Arn]

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    CustomEntityTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.customEntityTableName}
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: S
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    BucketForWriting:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketForWriting}
        VersioningConfiguration: 
          Status: Suspended  # no versioning, other option - Enabled

    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        EmailConfiguration: 
          EmailSendingAccount: DEVELOPER  # for custom message, other option - COGNITO_DEFAULT
          From: {{ cookiecutter.ses_email }}
          #arn:aws:ses:us-east-1:1234567890:identity/john@myemail.com - sourceARN to verified email address in SES
          SourceArn: arn:aws:ses:{{ cookiecutter.ses_region }}:{{ cookiecutter.aws_account_id }}:identity/{{ cookiecutter.ses_email }} # noqa
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: False
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
        
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_CUSTOM_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED  # recommended option
   
    ReadGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties: 
        Description: Read entities
        GroupName: reader
        Precedence: 0
        UserPoolId: !Ref CognitoUserPool

    ModifyGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties: 
        Description: Add, update, delete entities
        GroupName: modifier
        Precedence: 0
        UserPoolId: !Ref CognitoUserPool

    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: {{cookiecutter.project_slug}}-${self:custom.currentStage}

    OpenApiDocsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.openApiDocsBucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html

layers:
  basic:
    path: ./code/layers/basic_layer
    name: basic_layer_${self:custom.currentStage}
    compatibleRuntimes:
      - python3.7
      - python3.8
