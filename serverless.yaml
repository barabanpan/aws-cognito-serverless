# For full config options, check the docs:
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/

service: learn-serverless

frameworkVersion: '2'

package:
  individually: true  # for each lambda to be packaged individually


provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: eu-central-1
  apiGateway:
    shouldStartNameWithService: true
  environment:
    USERS_TABLE_NAME: ${self:custom.usersTableName}
    COGNITO_CLIENT_ID: 
      Ref: CognitoUserPoolClient
  iamRoleStatements:
      - Effect: "Allow"
        Action:
         - dynamodb:PutItem
        Resource:
          Fn::GetAtt: [UsersTable, Arn]

custom:
  currentStage: ${opt:stage, self:provider.stage, 'dev'}
  usersTableName: users_${self:custom.currentStage}
  userPoolName: user-pool-${self:custom.currentStage}
  userPoolClientName: user-pool-client-${self:custom.currentStage}
  cognitoUserPoolDomainName: example199754-${self:custom.currentStage}

functions:
  sign_up:
    handler: code/sign_up/sign_up.handler
    layers:
      - { Ref: BasicLambdaLayer }
    events:
      - http:
          path: /sign_up
          method: post
          cors: true
    package:
      exclude:
        - ./**
      include:
        - code/sign_up/**

  sign_in:
    handler: code/tokens/sign_in/sign_in.handler
    layers:
      - { Ref: BasicLambdaLayer }
    events:
      - http:
          path: /tokens/sign_in
          method: get
          cors: true
    package:
      exclude:
        - ./**
      include:
        - code/tokens/sign_in/**

  refresh_token:
    handler: code/tokens/refresh/refresh.handler
    layers:
      - { Ref: BasicLambdaLayer }
    events:
      - http:
          path: /tokens/refresh
          method: get
          cors: true
    package:
      exclude:
        - ./**
      include:
        - code/tokens/refresh/**

  custom_message:
    handler: code/custom_verification_message/custom_message.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: CustomMessage
          existing: true
    package:
      exclude:
        - ./**
      include:
        - code/custom_verification_message/**

  health_check:
    handler: code/health_check/health_check.handler
    layers:
      - { Ref: BasicLambdaLayer }
    events:
      - http:
          path: /health_check
          method: get
          cors: true
    package:
      exclude:
        - ./**
      include:
        - code/health_check/**

  secret_resource:
    handler: code/secret_resource/secret_resource.handler
    layers:
      - { Ref: BasicLambdaLayer }
    events:
      - http:
          path: /secret_resource
          method: get
          cors: true
          authorizer:
            name: cognito_authorizer
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS  # use TOKEN for custom authorizer
            arn:
              Fn::GetAtt:
                - CognitoUserPool
                - Arn
            #ProviderARNs:
            #  - Ref: CognitoUserPool
            scopes:
              - aws.cognito.signin.user.admin

    package:
      exclude:
        - ./**
      include:
        - code/secret_resource/**

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        EmailConfiguration: 
          EmailSendingAccount: DEVELOPER  # COGNITO_DEFAULT
          From: nataliia.dyshko@ukr.net
          #arn:aws:ses:us-east-1:1234567890:identity/john@myemail.com - like that for DEVELOPER
          #SourceArn: # sourceARN to verified email address in SES
          SourceArn: arn:aws:ses:eu-west-1:343179190615:identity/nataliia.dyshko@ukr.net
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
        AccountRecoverySetting:
          RecoveryMechanisms:
            -  Name: verified_email
               Priority: 1
        AutoVerifiedAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: False
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK
        
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_CUSTOM_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED  # recommended option

    CognitoUserPoolDomain:  # for verification link instead of code
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:custom.cognitoUserPoolDomainName}
        UserPoolId:
          Ref: CognitoUserPool

layers:
  basic:
    path: ./code/layers/basic_layer
    name: basic_layer
    compatibleRuntimes:
      - python3.6
      - python3.7
      - python3.8